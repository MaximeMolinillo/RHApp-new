{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/max_2/Desktop/angular/RHApp-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { BehaviorSubject, Subject } from \"rxjs\";\nimport { User } from \"./core/models/user.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-type': 'application/json',\n    'Authorization': 'Basic ' + btoa('loulou59:root'),\n    'Access-Control-Allow-Origin': '*'\n  })\n};\nexport class AuthService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.loggedIn = new BehaviorSubject(false);\n  }\n  get isLoggedIn() {\n    return this.loggedIn.asObservable();\n  }\n  login({\n    username,\n    password\n  }) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let utilisateur = new User(username, password, \"\");\n      var subject = new Subject();\n      _this.http.post('http://localhost:3000/api/personnes', utilisateur, httpOptions).subscribe({\n        next: utilisateurCo => {\n          if (utilisateurCo) {\n            localStorage.setItem('ROLE', utilisateurCo.role);\n            _this.loggedIn.next(true);\n            subject.next(true);\n          } else {\n            _this.loggedIn.next(false);\n            subject.next(false);\n          }\n        },\n        error: error => {\n          console.log(\"error : \" + error);\n          _this.loggedIn.next(false);\n          subject.next(false);\n        }\n      });\n      return subject.asObservable();\n    })();\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,eAAe,EAAcC,OAAO,QAAQ,MAAM;AAC3D,SAASC,IAAI,QAAQ,0BAA0B;;;;AAE/C,MAAMC,WAAW,GAAG;EAChBC,OAAO,EAAE,IAAIL,WAAW,CAAC;IACrB,cAAc,EAAE,kBAAkB;IAChC,eAAe,EAAE,QAAQ,GAACM,IAAI,CAAC,eAAe,CAAC;IACjD,6BAA6B,EAAE;GAClC;CACJ;AAKD,OAAM,MAAOC,WAAW;EAKpBC,YAAoBC,MAAc,EAAUC,IAAgB;IAAxC,WAAM,GAAND,MAAM;IAAkB,SAAI,GAAJC,IAAI;IAJxC,aAAQ,GAAG,IAAIT,eAAe,CAAU,KAAK,CAAC;EAIU;EAEhE,IAAIU,UAAU;IACV,OAAO,IAAI,CAACC,QAAQ,CAACC,YAAY,EAAE;EACvC;EAEMC,KAAK,CAAC;IAAEC,QAAQ;IAAEC;EAAQ,CAA2C;IAAA;IAAA;MACvE,IAAIC,WAAW,GAAG,IAAId,IAAI,CAACY,QAAQ,EAAEC,QAAQ,EAAE,EAAE,CAAC;MAAC,IAAIE,OAAO,GAAG,IAAIhB,OAAO,EAAW;MAC1F,KAAI,CAACQ,IAAI,CAACS,IAAI,CAAO,qCAAqC,EAAEF,WAAW,EAAEb,WAAW,CAAC,CAACgB,SAAS,CAAC;QAC3FC,IAAI,EAAIC,aAAa,IAAG;UACtB,IAAGA,aAAa,EAAC;YACfC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEF,aAAa,CAACG,IAAI,CAAC;YAChD,KAAI,CAACb,QAAQ,CAACS,IAAI,CAAC,IAAI,CAAC;YACxBH,OAAO,CAACG,IAAI,CAAC,IAAI,CAAC;WACnB,MAAM;YACL,KAAI,CAACT,QAAQ,CAACS,IAAI,CAAC,KAAK,CAAC;YACzBH,OAAO,CAACG,IAAI,CAAC,KAAK,CAAC;;QAEvB,CAAC;QACDK,KAAK,EAAIA,KAAK,IAAG;UACfC,OAAO,CAACC,GAAG,CAAC,UAAU,GAACF,KAAK,CAAC;UACzB,KAAI,CAACd,QAAQ,CAACS,IAAI,CAAC,KAAK,CAAC;UACzBH,OAAO,CAACG,IAAI,CAAC,KAAK,CAAC;QACzB;OACD,CACA;MACD,OAAOH,OAAO,CAACL,YAAY,EAAE;IAAC;EAChC;EAAC;qBAhCMN,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAsB,SAAXtB,WAAW;IAAAuB,YAFR;EAAM","names":["HttpHeaders","BehaviorSubject","Subject","User","httpOptions","headers","btoa","AuthService","constructor","router","http","isLoggedIn","loggedIn","asObservable","login","username","password","utilisateur","subject","post","subscribe","next","utilisateurCo","localStorage","setItem","role","error","console","log","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\max_2\\Desktop\\angular\\RHApp-new\\src\\app\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { BehaviorSubject, Observable, Subject } from \"rxjs\";\r\nimport { User } from \"./core/models/user.model\";\r\n\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({\r\n        'Content-type': 'application/json',\r\n          'Authorization': 'Basic '+btoa('loulou59:root'),\r\n        'Access-Control-Allow-Origin': '*',\r\n    })\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n    private loggedIn = new BehaviorSubject<boolean>(false);\r\n    // isLoggedIn: boolean = false;\r\n    roleAs: string | null | undefined;\r\n\r\n    constructor(private router: Router, private http: HttpClient) { }\r\n\r\n    get isLoggedIn() {\r\n        return this.loggedIn.asObservable();\r\n    }\r\n\r\n    async login({ username, password }: { username: string; password: string; }): Promise<Observable<boolean>> {\r\n        let utilisateur = new User(username, password, \"\");var subject = new Subject<boolean>();\r\n     this.http.post<User>('http://localhost:3000/api/personnes', utilisateur, httpOptions).subscribe({\r\n          next : (utilisateurCo)=>{\r\n            if(utilisateurCo){\r\n              localStorage.setItem('ROLE', utilisateurCo.role) \r\n              this.loggedIn.next(true);\r\n              subject.next(true); \r\n            } else {          \r\n              this.loggedIn.next(false); \r\n              subject.next(false); \r\n            }\r\n          },\r\n          error : (error)=>{ \r\n            console.log(\"error : \"+error)\r\n                this.loggedIn.next(false);  \r\n                subject.next(false); \r\n          }\r\n        }\r\n        )\r\n        return subject.asObservable();\r\n      }\r\n\r\n\r\n\r\n    // login(username: string, password: string): boolean {\r\n    //     this.isLoggedIn = (username == 'max' && password == 'root');\r\n    //     return this.isLoggedIn\r\n    // }\r\n\r\n    // logout() {\r\n    //     this.isLoggedIn = false;\r\n    //     this.router.navigate(['/login'])\r\n    // }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}