{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/max_2/Desktop/angular/RHApp-new/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { Subject } from \"rxjs\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-type': 'application/json',\n    'Authorization': 'Basic ' + btoa('mehdy:mehdy'),\n    'Access-Control-Allow-Origin': '*'\n  })\n};\nexport class AuthService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n  }\n  get isLoggedIn() {\n    return this.loggedIn.asObservable();\n  }\n  // login(username: string, password: string): boolean {\n  //     return this.isLoggedIn\n  // }\n  login({\n    username,\n    password\n  }) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let utilisateur = new Worker(username, password, \"\");\n      var subject = new Subject();\n      yield _this.http.post('http://localhost:3000/api/', utilisateur, httpOptions).subscribe({\n        next: workerCo => {\n          if (workerCo) {\n            localStorage.setItem('ROLE', workerCo.role);\n            _this.loggedIn.next(true);\n            subject.next(true);\n          } else {\n            _this.loggedIn.next(false);\n            subject.next(false);\n          }\n        },\n        error: error => {\n          console.log(\"error : \" + error);\n          _this.loggedIn.next(false);\n          subject.next(false);\n        }\n      });\n      return subject.asObservable();\n    })();\n  }\n  logout() {\n    this.isLoggedIn = false;\n    this.router.navigate(['/login']);\n  }\n}","map":{"version":3,"mappings":";AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAAsCC,OAAO,QAAQ,MAAM;AAM3D,MAAMC,WAAW,GAAG;EAChBC,OAAO,EAAE,IAAIH,WAAW,CAAC;IACvB,cAAc,EAAE,kBAAkB;IAClC,eAAe,EAAE,QAAQ,GAACI,IAAI,CAAC,aAAa,CAAC;IAC7C,6BAA6B,EAAE;GAChC;CACF;AACH,OAAM,MAAOC,WAAW;EAGpBC,YAAoBC,MAAc,EAAUC,IAAgB;IAAxC,WAAM,GAAND,MAAM;IAAkB,SAAI,GAAJC,IAAI;EAAgB;EAGhE,IAAIC,UAAU;IACV,OAAO,IAAI,CAACC,QAAQ,CAACC,YAAY,EAAE;EACrC;EACF;EAEA;EACA;EAEMC,KAAK,CAAC;IAAEC,QAAQ;IAAEC;EAAQ,CAA2C;IAAA;IAAA;MACvE,IAAIC,WAAW,GAAG,IAAIC,MAAM,CAACH,QAAQ,EAAEC,QAAQ,EAAE,EAAE,CAAC;MAAC,IAAIG,OAAO,GAAG,IAAIhB,OAAO,EAAW;MACzF,MAAM,KAAI,CAACO,IAAI,CAACU,IAAI,CAAS,4BAA4B,EAAEH,WAAW,EAAEb,WAAW,CAAC,CAACiB,SAAS,CAAC;QAC7FC,IAAI,EAAIC,QAA2B,IAAG;UACpC,IAAGA,QAAQ,EAAC;YACVC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEF,QAAQ,CAACG,IAAI,CAAC;YAC3C,KAAI,CAACd,QAAQ,CAACU,IAAI,CAAC,IAAI,CAAC;YACxBH,OAAO,CAACG,IAAI,CAAC,IAAI,CAAC;WACnB,MAAM;YACL,KAAI,CAACV,QAAQ,CAACU,IAAI,CAAC,KAAK,CAAC;YACzBH,OAAO,CAACG,IAAI,CAAC,KAAK,CAAC;;QAEvB,CAAC;QACDK,KAAK,EAAIA,KAAK,IAAG;UACfC,OAAO,CAACC,GAAG,CAAC,UAAU,GAACF,KAAK,CAAC;UACzB,KAAI,CAACf,QAAQ,CAACU,IAAI,CAAC,KAAK,CAAC;UACzBH,OAAO,CAACG,IAAI,CAAC,KAAK,CAAC;QACzB;OACD,CACA;MACD,OAAOH,OAAO,CAACN,YAAY,EAAE;IAAC;EAChC;EAEFiB,MAAM;IACF,IAAI,CAACnB,UAAU,GAAG,KAAK;IACvB,IAAI,CAACF,MAAM,CAACsB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EACpC","names":["HttpHeaders","Subject","httpOptions","headers","btoa","AuthService","constructor","router","http","isLoggedIn","loggedIn","asObservable","login","username","password","utilisateur","Worker","subject","post","subscribe","next","workerCo","localStorage","setItem","role","error","console","log","logout","navigate"],"sourceRoot":"","sources":["C:\\Users\\max_2\\Desktop\\angular\\RHApp-new\\src\\app\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { BehaviorSubject, Observable, Subject } from \"rxjs\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-type': 'application/json',\r\n      'Authorization': 'Basic '+btoa('mehdy:mehdy'),\r\n      'Access-Control-Allow-Origin': '*',\r\n    })\r\n  }\r\nexport class AuthService {\r\n   private LoggedIn: (new () => BehaviorSubject<boolean>) | undefined;\r\n\r\n    constructor(private router: Router, private http: HttpClient) { }\r\n\r\n\r\n    get isLoggedIn() {\r\n        return this.loggedIn.asObservable(); \r\n      }\r\n    // login(username: string, password: string): boolean {\r\n        \r\n    //     return this.isLoggedIn\r\n    // }\r\n\r\n    async login({ username, password }: { username: string; password: string; }): Promise<Observable<boolean>> {\r\n        let utilisateur = new Worker(username, password, \"\");var subject = new Subject<boolean>();\r\n        await this.http.post<Worker>('http://localhost:3000/api/', utilisateur, httpOptions).subscribe({\r\n          next : (workerCo: { role: string; })=>{\r\n            if(workerCo){\r\n              localStorage.setItem('ROLE', workerCo.role) \r\n              this.loggedIn.next(true);\r\n              subject.next(true); \r\n            } else {          \r\n              this.loggedIn.next(false); \r\n              subject.next(false); \r\n            }\r\n          },\r\n          error : (error)=>{ \r\n            console.log(\"error : \"+error)\r\n                this.loggedIn.next(false);  \r\n                subject.next(false); \r\n          }\r\n        }\r\n        )\r\n        return subject.asObservable();\r\n      }\r\n\r\n    logout() {\r\n        this.isLoggedIn = false;\r\n        this.router.navigate(['/login'])\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}